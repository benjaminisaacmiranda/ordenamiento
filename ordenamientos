package taller_ordenamiento;
import java.util.Scanner;
public class Taller_ordenamiento {
    public static void burbuja(int[] arr) {
        int n = arr.length;
        int comparaciones = 0;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                comparaciones++;
                if (arr[j] > arr[j + 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                    mostrarArray(arr);
                }
            }
        }
        System.out.println("Cantidad de comparaciones realizadas: " + comparaciones);
    }
    public static void insercion(int[] arr) {
        int n = arr.length;
        int comparaciones = 0;
        for (int i = 1; i < n; ++i) {
            int key = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > key) {
                comparaciones++;
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
            mostrarArray(arr);
        }
        System.out.println("Cantidad de comparaciones realizadas: " + comparaciones);
    }
    public static void seleccion(int[] arr) {
        int n = arr.length;
        int comparaciones = 0;

        for (int i = 0; i < n - 1; i++) {
            int minimo = i;
            for (int j = i + 1; j < n; j++) {
                comparaciones++;
                if (arr[j] < arr[minimo]) {
                    minimo = j;
                }
            }
            int temp = arr[minimo];
            arr[minimo] = arr[i];
            arr[i] = temp;
            mostrarArray(arr);
        }
        System.out.println("cantidad de comparaciones realizadas: " + comparaciones);
    }
    public static void shellSort(int[] arr) {
       int n = arr.length;
       int comparaciones = 0;
       for (int gap = n / 2; gap > 0; gap /= 2) {
           for (int i = gap; i < n; i++) {
               int temp = arr[i];
               int j = i;
               while (j >= gap && arr[j - gap] > temp) {
                    comparaciones++;
                    arr[j] = arr[j - gap];
                    j -= gap;
                }
                arr[j] = temp;
                mostrarArray(arr);
        }
    }
    System.out.println("Cantidad de comparaciones realizadsa: " + comparaciones);
}
    public static void margeSort(int[] arr) {
        margeSort(arr, 0, arr.length - 1);
    }
    private static void margeSort(int[] arr, int l, int r) {
        if (l < r) {
            int m = (l + r) / 2;
            margeSort(arr, l, m);
            margeSort(arr, m + 1, r);

            marge(arr, l, m, r);
        }
    }
    private static void marge(int[] arr, int l, int m, int r) {
        int n1 = m - l + 1;
        int n2 = r - m;

        int[] L = new int[n1];
        int[] R = new int[n2];

        for (int i = 0; i < n1; ++i)
            L[i] = arr[l + i];
        for (int j = 0; j < n2; ++j)
            R[j] = arr[m + 1 + j];

        int i = 0, j = 0;
        int k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
            mostrarArray(arr);
        }
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }
    public static void quicksort(int[] arr) {
        quicksort(arr, 0, arr.length - 1);
    }
    private static void quicksort(int[] arr, int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high);

            quicksort(arr, low, pi - 1);
            quicksort(arr, pi + 1, high);
        }
    }
    private static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = (low - 1);
        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
                mostrarArray(arr);
            }
        }
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;
        mostrarArray(arr);
        return i + 1;
    }
    public static void mostrarArray(int[] arr) {
        for (int i : arr) {
            System.out.print(i + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Ingrese el tamaño del array:");
        int n = scanner.nextInt();
        int[] arr = new int[n];
        System.out.println("Ingrese los elementos del array:");
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        boolean salir = false;
        while (!salir) {
            System.out.println("Elija el método de ordenamiento:");
            System.out.println("1. Burbuja");
            System.out.println("2. Inserción");
            System.out.println("3. Selección");
            System.out.println("4. ShellSort");
            System.out.println("5. MergeSort");
            System.out.println("6. QuickSort");
            System.out.println("7. Salir");
            int opcion = scanner.nextInt();
            switch (opcion) {
                case 1:
                    System.out.println("Array antes de ser ordenado:");
                    mostrarArray(arr);
                    burbuja(arr.clone());
                    break;
                case 2:
                    System.out.println("Array antes de ser ordenado:");
                    mostrarArray(arr);
                    insercion(arr.clone());
                    break;
                case 3:
                    System.out.println("Array antes de ser ordenado:");
                    mostrarArray(arr);
                    seleccion(arr.clone());
                    break;
                case 4:
                    System.out.println("Array antes de ser ordenado:");
                    mostrarArray(arr);
                    shellSort(arr.clone());
                    break;
                case 5:
                    System.out.println("Array antes de ser ordenado:");
                    mostrarArray(arr);
                    margeSort(arr.clone());
                    break;
                case 6:
                    System.out.println("Array antes de ser ordenado:");
                    mostrarArray(arr);
                    quicksort(arr.clone());
                    break;
                case 7:
                    salir = true;
                    break;
                default:
                    System.out.println("Opción no válida.");
            }
        }
        scanner.close();
    }
}
